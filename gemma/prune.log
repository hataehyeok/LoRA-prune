`config.hidden_act` is ignored, you should use `config.hidden_activation` instead.
Gemma's activation function will be set to `gelu_pytorch_tanh`. Please, use
`config.hidden_activation` if you want to override this behaviour.
See https://github.com/huggingface/transformers/pull/29402 for more details.
Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards:  50%|█████     | 1/2 [00:02<00:02,  2.30s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:02<00:00,  1.04s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:02<00:00,  1.23s/it]
Pruning the model...

Traceback (most recent call last):
  File "/home/hth021002/lora-prune/gemma/gemma2b-glue.py", line 316, in <module>
    prune_and_knowledge_distillation(test_data)
  File "/home/hth021002/lora-prune/gemma/gemma2b-glue.py", line 259, in prune_and_knowledge_distillation
    threshold = torch.quantile(weight_tensor.abs(), sparsity)  # Determine pruning threshold
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 3.91 GiB. GPU 0 has a total capacity of 11.90 GiB of which 3.82 GiB is free. Including non-PyTorch memory, this process has 8.08 GiB memory in use. Of the allocated memory 7.90 GiB is allocated by PyTorch, and 16.59 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
